from pathlib import Path
import re
import os
CHROM = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22']

configfile: "QTL_wp3.yaml"
imageDir = config["image_folder"]
includeDir = config["top_dir"]
celltypes=config["celltypes"]
outputFolder=Path(config["out_folder"])
scripts_folder = "/tools/WG3-pipeline-QTL/scripts/"

limix_path="singularity exec --bind "+includeDir+" "+imageDir+"limixDec22.simg python /limix_qtl/Limix_QTL/"

##QTL mapping variables.
phenotypeFile = config["WG3_folder"]+'input/{ct}.qtlInput.txt'    # use {ct} to indicate celltype
genotypeFile= config["WG3_folder"]+ 'genotype_input/EUR_imputed_hg38_varFiltered_chr{chrom}'  # use {chrom} if genotype is split by chromosome
covariateFile= config["WG3_folder"]+'input/{ct}.qtlInput.Pcs.txt'
kinshipFile= config["WG3_folder"]+'input/sample.kinship'
chunkFile = config["WG3_folder"]+'input/ChunkingFile.txt'
annoFile = config["WG3_folder"]+'input/LimixAnnotationFile.txt'
sampleMappingFile = config["WG3_folder"]+'input/smf.txt'

##LD calculation variables
winFiles = os.listdir(config["WG3_folder"]+'input/WindowsFiles')

topDirInput = config["WG3_folder"]+'input'
bgen_folder = config["WG3_folder"]+ 'genotype_input'

topDirInput+"/LDMatrices/chr_{chrom}_window_{num}_{start}_{end}.pkl"

chunk_chrom, chunk_start, chunk_end=[], [], []
with open(chunkFile) as fp:
    for line in fp:
        re_match=re.match(r"([A-Za-z0-9]+):(\d+)-(\d+)", line.strip())
        chunk_chrom.append(re_match[1])
        chunk_start.append(re_match[2])
        chunk_end.append(re_match[3])

qtlChunks=expand(outputFolder/"{ct}"/"qtl"/"{chrom}_{start}_{end}.finished", zip, chrom=chunk_chrom, start=chunk_start, end=chunk_end, allow_missing=True)
ldWindows = expand(topDirInput+"/LDMatrices/{winF}.gz",winF=winFiles)

rule all:
    input:
        expand(outputFolder/"{ct}"/"top_qtl_results_all.txt.gz", ct=celltypes),
        expand(outputFolder/"{ct}"/"qtl.h5.tgz", ct=celltypes),
        expand(outputFolder/"{ct}"/"qtl.annotation.tgz", ct=celltypes),
        expand(outputFolder/"{ct}"/"qtl.permutations.tgz", ct=celltypes),
        outputFolder/"LDMatrices.tgz"
    output:
        touch(expand(outputFolder/"{ct}"/"done.txt", ct=celltypes))


rule run_qtl_mapping:
    input:
        af = annoFile,
        pf = phenotypeFile,
        smf = sampleMappingFile,
        cf = covariateFile,
        kf = kinshipFile,
        gen  = genotypeFile,
        genM = genotypeFile+".bgen.metafile"
        #rf = config["randomeff_files"] if config["randomeff_files"]!='' else []
    output:
        touch(outputFolder/"{ct}"/"qtl"/"{chrom}_{start}_{end}.finished")
    priority:10
    params:
        od = str(outputFolder/"{ct}"/"qtl")+"/",
        np = config["numberOfPermutations"],
        maf = config["minorAlleleFrequency"],
        hwe = config["hardyWeinbergCutoff"],
        w = config["windowSize"]
    shell:
        (limix_path + "run_QTL_analysis_metaAnalysis.py "
            " --bgen {input.gen} "
            " -af {input.af} "
            " -cf {input.cf} "
            " -pf {input.pf} "
            " -rf {input.kf} "
            " -smf {input.smf} "
            " -od {params.od} "
            " -gr {wildcards.chrom}:{wildcards.start}-{wildcards.end} "
            " -np {params.np} "
            " -maf {params.maf} "
            " -c -gm gaussnorm "
            " -w {params.w} "
            " -hwe {params.hwe} "
            " -rs .8 ")

rule top_feature:
    input:
        qtlChunks
    output:
        temp(outputFolder/"{ct}"/"top_qtl_results_all.txt")
    params:
        idir = str(outputFolder/"{ct}"/"qtl")+"/",
        odir = str(outputFolder/"{ct}")+"/"
    shell:
        (limix_path + "post_processing/minimal_postprocess.py "
            " -id {params.idir} "
            " -od {params.odir} "
            "-tfb "
            "-sfo ")

rule compress_qtl:
    input:
        topQtl = outputFolder/"{ct}"/"top_qtl_results_all.txt",
        qtlChunks = qtlChunks
    output:
        h5=outputFolder/"{ct}"/"qtl.h5.tgz",
        anno=outputFolder/"{ct}"/"qtl.annotation.tgz",
        perm=outputFolder/"{ct}"/"qtl.permutations.tgz",
        gzTopQtl=outputFolder/"{ct}"/"top_qtl_results_all.txt.gz"
    params:
        idir = str(outputFolder/"{ct}"/"qtl")
    shell: "tar -czf {output.h5} {params.idir}/*.h5 && find {params.idir} | grep '\.pickle.gz$' > {params.idir}/files.txt &&  tar cf {output.perm} -T {params.idir}/files.txt && tar -cf {output.anno} {params.idir}/*.txt.gz && gzip {input.topQtl} "
    ##&& rm -rf {params.idir}

rule make_temporary_files:
    input:
        bgen_file=genotypeFile+".bgen"
    output:
        temp(bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.z"),
        temp(bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.sample"),
        temp(bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen_master.txt"),
        bgen_folder+"EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.metafile"
    shell:
        """
        singularity exec --bind {includeDir} {imageDir}/wp3.simg python {scripts_folder}/make_z.py {input.bgen_file} {bgen_folder}
        """

rule create_bdose_file_by_chr:
    input:
        bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen",
        bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.bgi",
        bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.z",
        bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.sample",
        bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen_master.txt"
    output:
        temp(bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.bdose"),
        temp(bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.bdose.bdose.tmp0"),
        temp(bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.bdose.meta.tmp0")
    shell:
        """
        singularity exec --bind {includeDir} {imageDir}/wp3.simg /tools/ldstore_v2.0_x86_64/ldstore_v2.0_x86_64 --in-files {bgen_folder}/EUR_imputed_hg38_varFiltered_chr{wildcards.chrom}.bgen_master.txt --write-bdose --bdose-version 1.1
        """

rule LD_per_window:
    input:
        bdose_file=bgen_folder+"/EUR_imputed_hg38_varFiltered_chr{chrom}.bgen.bdose",
        window=topDirInput+'/WindowsFiles/chr_{chrom}_window_{num}_{start}_{end}.pkl'
    params:
        out = topDirInput+"/LDMatrices/chr_{chrom}_window_{num}_{start}_{end}.pkl"
    output:
        topDirInput+"/LDMatrices/chr_{chrom}_window_{num}_{start}_{end}_means.pkl.gz",
        topDirInput+"/LDMatrices/chr_{chrom}_window_{num}_{start}_{end}_low_dim.pkl.gz",
        topDirInput+"/LDMatrices/chr_{chrom}_window_{num}_{start}_{end}_components.pkl.gz",
        touch(topDirInput+"/LDMatrices/chr_{chrom}_window_{num}_{start}_{end}.pkl.gz")
    shell:
        """
        mkdir -p {topDirInput}/LDMatrices
        singularity exec --bind {includeDir} {imageDir}/wp3.simg python {scripts_folder}/process_LD_windows.py {topDirInput} {input.bdose_file} {input.window} {wildcards.chrom} {params.out}
        """

rule compress_ld:
    input:
        ldWindows = ldWindows
    output:
        outputFolder/"LDMatrices.tgz"
    params:
        topDirInput+"/LDMatrices"
    shell: 
        "tar -czf {output} {params}"
    ##&& rm -rf {params.idir}
